{"version":3,"file":"types.js","names":[],"sources":["../../src/types.ts"],"sourcesContent":["import type {\n  BaseHTMLAttributes,\n  HtmlHTMLAttributes,\n  HTMLAttributes,\n  LinkHTMLAttributes,\n  MetaHTMLAttributes,\n  ReactNode,\n  ScriptHTMLAttributes,\n  StyleHTMLAttributes,\n} from 'react';\n\nexport type BaseProps = BaseHTMLAttributes<HTMLBaseElement>;\nexport type BodyProps = HTMLAttributes<HTMLBodyElement>;\nexport type HtmlProps = HtmlHTMLAttributes<HTMLHtmlElement>;\nexport type LinkProps = LinkHTMLAttributes<HTMLLinkElement>;\nexport type MetaProps = MetaHTMLAttributes<HTMLMetaElement>;\n\nexport type NoscriptProps = HTMLAttributes<HTMLElement> & {\n  innerHTML?: string;\n};\n\nexport type ScriptProps = ScriptHTMLAttributes<HTMLScriptElement> & {\n  innerHTML?: string;\n};\n\nexport type StyleProps = StyleHTMLAttributes<HTMLStyleElement> & {\n  cssText?: string;\n};\n\nexport type TitleProps = HTMLAttributes<HTMLTitleElement>;\n\nexport type HelmetChildProps = BaseProps | BodyProps | HtmlProps | LinkProps\n  | MetaProps | NoscriptProps\n  | ScriptProps | StyleProps | TitleProps;\n\n/**\n * String data for title.\n */\nexport type StringData = {\n  title?: string;\n  titleTemplate?: string;\n};\n\nexport type HelmetTags = {\n  baseTag: HTMLBaseElement[];\n  linkTags: HTMLLinkElement[];\n  metaTags: HTMLMetaElement[];\n  noscriptTags: HTMLElement[];\n  scriptTags: HTMLScriptElement[];\n  styleTags: HTMLStyleElement[];\n};\n\nexport type HelmetDatum<T = ReactNode> = {\n  toString(): string;\n  toComponent(): T;\n};\n\nexport type HelmetHTMLBodyDatum = HelmetDatum<HTMLAttributes<HTMLBodyElement>>;\n\nexport type HelmetHTMLElementDatum = HelmetDatum<\n  HTMLAttributes<HTMLHtmlElement>>;\n\nexport type HelmetServerState = {\n  base: HelmetDatum;\n  bodyAttributes: HelmetHTMLBodyDatum;\n  htmlAttributes: HelmetHTMLElementDatum;\n  link: HelmetDatum;\n  meta: HelmetDatum;\n  noscript: HelmetDatum;\n  script: HelmetDatum;\n  style: HelmetDatum;\n  title: HelmetDatum;\n\n  // TODO: Why is it needed? Can't it be a part of `title` value?\n  titleAttributes?: HelmetDatum;\n\n  priority: HelmetDatum;\n};\n\nexport type StateUpdate = HelmetTags & {\n  bodyAttributes: BodyProps;\n  defer: boolean;\n  htmlAttributes: HtmlProps;\n\n  // TODO: The signature of this callback is essentially the same as\n  // OnChangeClientState, declared inside Helmet module; and there is\n  // a circular dependency between that declaration and this StateUpdate type.\n  // Also, not sure this field is really necessary inside StateUpdate?\n  onChangeClientState: (\n    newState: StateUpdate,\n    addedTags: Partial<HelmetTags>,\n    removedTags: Partial<HelmetTags>,\n  ) => void;\n\n  title: string;\n  titleAttributes: TitleProps;\n};\n\n// TODO: Rewise the typing!\nexport type OnChangeClientState = (\n  // TODO: So... the new state should be a map of attribute/value maps\n  // for all children elements.\n  newState: StateUpdate,\n  addedTags: Partial<HelmetTags>,\n  removedTags: Partial<HelmetTags>,\n) => void;\n\n/**\n * A subset of <Helmet> properties, corresponding to prop arrays for\n * elements that may be present in DOM multiple times.\n */\nexport type HelmetPropArrays = {\n  link?: LinkProps[];\n  meta?: MetaProps[];\n  noscript?: NoscriptProps[];\n  script?: ScriptProps[];\n  style?: StyleProps[];\n};\n\nexport type PropArrayItem<T extends keyof HelmetPropArrays>\n  = Exclude<HelmetPropArrays[T], undefined>[number];\n\n/**\n * A subset of <Helmet> properties, corresponding to props for elements\n * that may be present in DOM a single time at most.\n */\nexport type HelmetPropObjects = {\n  bodyAttributes?: BodyProps;\n  htmlAttributes?: HtmlProps;\n  titleAttributes?: TitleProps;\n};\n\nexport type HelmetPropBooleans = {\n  prioritizeSeoTags?: boolean;\n};\n\n/**\n * Properties accepted by <Helmet> components.\n */\nexport type HelmetProps = HelmetPropArrays\n  & HelmetPropObjects\n  & HelmetPropBooleans\n  & {\n    base?: BaseProps;\n    children?: ReactNode;\n    defaultTitle?: string;\n    defer?: boolean;\n    encodeSpecialCharacters?: boolean;\n    onChangeClientState?: OnChangeClientState;\n    title?: string;\n    titleTemplate?: string;\n  };\n\nexport type RegisteredHelmetPropsArray\n  = Array<[id: string, props: HelmetProps]>;\n\n/**\n * The overall Helmet state, aggregated from props of all <Helmet> instances\n * registered with the Helmet context provider.\n */\nexport type AggregatedState = {\n  base: BaseProps | undefined;\n  bodyAttributes: BodyProps | undefined;\n  defer: boolean | undefined;\n  encodeSpecialCharacters: boolean;\n  htmlAttributes: HtmlProps | undefined;\n  links: LinkProps[] | undefined;\n  meta: MetaProps[] | undefined;\n  noscript: NoscriptProps[] | undefined;\n  onChangeClientState: OnChangeClientState | undefined;\n  priority: {\n    links: LinkProps[] | undefined;\n    meta: MetaProps[] | undefined;\n    script: ScriptProps[] | undefined;\n  } | undefined;\n  script: ScriptProps[] | undefined;\n  style: StyleProps[] | undefined;\n  title: string | undefined;\n  titleAttributes: TitleProps | undefined;\n};\n\nexport type MappedServerState = HelmetTags & { encode?: boolean };\n\n/**\n * Server-side rendering context.\n */\nexport type HelmetDataContext = {\n  helmet?: HelmetServerState;\n};\n\n/**\n * The value of internal context used by Helmet to communicate between its\n * context provider and <Helmet> components within its children tree.\n */\nexport type ContextValue = {\n  clientApply: () => void;\n\n  /** One function to register, update, and un-register <Helmet> instances\n   *  (or, more precisely their current aggregated props, aggregated between\n   *  the actual props of <Helmet> instance and its children). */\n  update: (id: string, props: HelmetProps | undefined) => void;\n};\n\nexport type HelmetProviderHeap = {\n  // TODO: Temporary, to keep legacy behavior to call onChange client-side\n  // callback on the first render.\n  firstRender: boolean;\n\n  helmets: RegisteredHelmetPropsArray;\n  nextAnimFrameId?: number;\n  serverState?: HelmetServerState;\n  state: AggregatedState | undefined;\n};\n"],"mappings":"","ignoreList":[]}