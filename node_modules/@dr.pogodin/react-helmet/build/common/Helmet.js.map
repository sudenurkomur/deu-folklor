{"version":3,"file":"Helmet.js","names":["_react","require","_constants","_Provider","_utils","assertChildType","childType","nestedChildren","Error","VALID_TAG_NAMES","includes","join","Array","isArray","getPropName","key","res","REACT_TAG_MAP","console","warn","reduceChildrenAndProps","props","cloneProps","item","Object","values","it","keys","p","Children","forEach","children","child","undefined","childProps","value","entries","type","toString","assertStringChild","child2","error","TAG_NAMES","BASE","base","BODY","bodyAttributes","FRAGMENT","mergeProps","HTML","htmlAttributes","LINK","META","pushToPropArray","NOSCRIPT","SCRIPT","innerHTML","STYLE","cssText","TITLE","titleAttributes","title","HEAD","bad","Helmet","context","use","Context","id","useId","update","useEffect","clientApply","_default","exports","default"],"sources":["../../src/Helmet.ts"],"sourcesContent":["import {\n  type FunctionComponent,\n  type ReactElement,\n  type ReactNode,\n  Children,\n  use,\n  useEffect,\n  useId,\n} from 'react';\n\nimport { REACT_TAG_MAP, TAG_NAMES, VALID_TAG_NAMES } from './constants';\n\nimport { Context } from './Provider';\n\nimport type {\n  BaseProps,\n  BodyProps,\n  HelmetChildProps,\n  HelmetProps,\n  HtmlProps,\n  LinkProps,\n  MetaProps,\n  NoscriptProps,\n  ScriptProps,\n  StyleProps,\n  TitleProps,\n} from './types';\nimport { cloneProps, mergeProps, pushToPropArray } from './utils';\n\nfunction assertChildType(\n  childType: ReactElement['type'],\n  nestedChildren: ReactNode,\n): asserts childType is TAG_NAMES {\n  if (typeof childType !== 'string') {\n    throw Error(\n      'You may be attempting to nest <Helmet> components within each other, which is not allowed. Refer to our API for more information.',\n    );\n  }\n\n  if (!(VALID_TAG_NAMES as string[]).includes(childType)) {\n    throw Error(\n      `Only elements types ${VALID_TAG_NAMES.join(', ')} are allowed. Helmet does not support rendering <${childType}> elements. Refer to our API for more information.`,\n    );\n  }\n\n  if (\n    !nestedChildren\n    || typeof nestedChildren === 'string'\n    || Array.isArray(nestedChildren)\n    // TODO: This piece of the check is wrong when parent is a fragment,\n    // and thus children may not be an array of strings.\n    // && nestedChildren.every((item) => typeof item === 'string')\n  ) return;\n\n  throw Error(\n    `Helmet expects a string as a child of <${childType}>. Did you forget to wrap your children in braces? ( <${childType}>{\\`\\`}</${childType}> ) Refer to our API for more information.`,\n  );\n}\n\n/**\n * Given a string key, it checks it against the legacy mapping between supported\n * HTML attribute names and their corresponding React prop names (for the names\n * that are different). If found in the mapping, it prints a warning to console\n * and returns the mapped prop name. Otherwise, it just returns the key as is,\n * assuming it is already a valid React prop name.\n */\nfunction getPropName(key: string): keyof HelmetChildProps {\n  const res = REACT_TAG_MAP[key];\n  if (res) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `\"${key}\" is not a valid JSX prop, replace it by \"${res}\"`,\n    );\n  }\n  return (res ?? key) as keyof HelmetChildProps;\n}\n\n/**\n * Given children and props of a <Helmet> component, it reduces them to a single\n * props object.\n *\n * TODO: I guess, it should be further refactored, to make it cleaner...\n * though, it should perfectly work as is, so not a huge priority for now.\n */\nfunction reduceChildrenAndProps(props: HelmetProps): Omit<HelmetProps, 'children'> {\n  // NOTE: `props` are clonned, thus it is safe to push additional items to\n  // array values of `res`, and to re-assign non-array values of `res`, without\n  // the risk to mutate the original `props` object.\n  const res: HelmetProps = cloneProps(props);\n\n  // TODO: This is a temporary block, for compatibility with legacy library.\n  for (const item of Object.values(props)) {\n    if (Array.isArray(item)) {\n      for (const it of item) {\n        // TODO: This condition is actually needed to prevent some test failures,\n        // I guess, something is messed up with related types?\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (it) {\n          for (const key of Object.keys(it)) {\n            const p = getPropName(key);\n            if (p !== key) {\n              it[p] = it[key as keyof HelmetChildProps] as unknown;\n              delete it[key as keyof HelmetChildProps];\n            }\n          }\n        }\n      }\n    } else if (item && typeof item === 'object') {\n      const it = item as HelmetChildProps;\n      for (const key of Object.keys(it)) {\n        const p = getPropName(key);\n        if (p !== key) {\n          it[p] = it[key as keyof HelmetChildProps] as unknown;\n          delete it[key as keyof HelmetChildProps];\n        }\n      }\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  Children.forEach(props.children, (child) => {\n    if (child === undefined || child === null) return;\n\n    if (typeof child !== 'object' || !('props' in child)) {\n      throw Error(\n        `\"${typeof child}\" is not a valid <Helmet> descendant`,\n      );\n    }\n\n    let nestedChildren: ReactNode;\n    const childProps: HelmetChildProps = {};\n    if (child.props) {\n      for (const [key, value] of Object.entries(child.props)) {\n        if (key === 'children') nestedChildren = value as ReactNode;\n        else childProps[getPropName(key)] = value as unknown;\n      }\n    }\n\n    let { type } = child;\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-conversion\n    if (typeof type === 'symbol') type = (type as 'symbol').toString();\n    assertChildType(type, nestedChildren);\n\n    function assertStringChild(child2: ReactNode): asserts child2 is string {\n      if (typeof child2 !== 'string') {\n        // TODO: We want to throw, but the legacy code did not, so we won't for\n        // now.\n        // eslint-disable-next-line no-console\n        console.error(`child of ${type as string} element should be a string`);\n\n        /*\n        throw Error(\n          // NOTE: assertChildType() above guarantees that `type` is a string,\n          // although it is not expressed in a way TypeScript can automatically\n          // pick up.\n        );\n        */\n      }\n    }\n\n    switch (type) {\n      case TAG_NAMES.BASE:\n        res.base = childProps as BaseProps;\n        break;\n\n      case TAG_NAMES.BODY:\n        res.bodyAttributes = childProps as BodyProps;\n        break;\n\n      case TAG_NAMES.FRAGMENT:\n        mergeProps(res, reduceChildrenAndProps({ children: nestedChildren }));\n        break;\n\n      case TAG_NAMES.HTML:\n        res.htmlAttributes = childProps as HtmlProps;\n        break;\n\n      case TAG_NAMES.LINK:\n      case TAG_NAMES.META:\n        if (nestedChildren) {\n          throw Error(\n            `<${type} /> elements are self-closing and can not contain children. Refer to our API for more information.`,\n          );\n        }\n        pushToPropArray(res, type, childProps as LinkProps | MetaProps);\n        break;\n\n      case TAG_NAMES.NOSCRIPT:\n      case TAG_NAMES.SCRIPT:\n        if (nestedChildren !== undefined) {\n          assertStringChild(nestedChildren);\n          (childProps as NoscriptProps | ScriptProps)\n            .innerHTML = nestedChildren;\n        }\n        pushToPropArray(res, type, childProps);\n        break;\n\n      case TAG_NAMES.STYLE:\n        assertStringChild(nestedChildren);\n        (childProps as StyleProps).cssText = nestedChildren;\n        pushToPropArray(res, type, childProps as StyleProps);\n        break;\n\n      case TAG_NAMES.TITLE:\n        res.titleAttributes = childProps as TitleProps;\n\n        if (typeof nestedChildren === 'string') res.title = nestedChildren;\n\n        // When title contains {} expressions the children are an array of\n        // strings, and other values.\n        else if (Array.isArray(nestedChildren)) res.title = nestedChildren.join('');\n        break;\n\n      case TAG_NAMES.HEAD:\n      default: {\n        // TODO: Perhaps, we should remove HEAD entry from TAG_NAMES?\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const bad: TAG_NAMES.HEAD = type;\n      }\n    }\n  });\n\n  delete res.children;\n  return res;\n}\n\nconst Helmet: FunctionComponent<HelmetProps> = (props) => {\n  const context = use(Context);\n\n  if (!context) {\n    throw Error(\n      '<Helmet> component must be within a <HelmetProvider> children tree',\n    );\n  }\n\n  const id = useId();\n\n  // TODO: Agh... we need it here to ensure that it works server-side,\n  // and we need the same in the useEffect() below to ensure it works\n  // client-side in strict mode (and, thus completely correctly from React's\n  // pure component / side effect logic). It clearly should be optimized,\n  // but let's care about it later.\n  context.update(id, reduceChildrenAndProps(props));\n\n  // TODO: I guess, these two useEffect() can be merged together, which should\n  // also allow to simplify and optimize the client-side management of attrs and\n  // elements managed by these. Though, keeping them separate is an easier way\n  // for now to ensure backward compatibility.\n  useEffect(() => {\n    context.update(id, reduceChildrenAndProps(props));\n    context.clientApply();\n  });\n\n  useEffect(() => () => {\n    context.update(id, undefined);\n    context.clientApply();\n  }, [context, id]);\n\n  return null;\n};\n\nexport default Helmet;\n"],"mappings":"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","ignoreList":[]}